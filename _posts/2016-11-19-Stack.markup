---
layout: post
title: "The Stack Data Structure"
date: 2016-11-08
excerpt: "Introduction to DSA"
tags: [post, algorithms, ACM, NAU, data structures, python]
comments: true
---

# Stack Data Structure
----------------------

What are data structures? Sounds like a tough word right? Well kinda. We have tons of data that we share over the internet or data that we create every second such as photos, music or documents. All of this has to be stored and processed in a correct manner which is both efficient in memory usage and speed. Well data structures teach us how different data can be stored, accessed and manipulated to achieve our goals. 
 
Let's take a look at the essential data structures:

### Stacks

Imagine a stack of books! Yup that's pretty much it. Let's say you have math, science, history and english books. So you make a stack out of them as such:

```
Begin {
  Place math book
  Next place science book
  Next place history book
  Next place english book
} End
```
This is called adding or *push*.
We end up with this kind of image in our heads as we follow each step:

|Stack  |Stack  |Stack  |Stack  |
|-------|-------|-------|-------|
|Math   |Science|History|English|
|       |Math   |Science|History|
|       |       |Math   |Science|
|       |       |       |Math   |

As you see the first element we put goes lower as we keep adding. So the first book, Math, is on the bottom. Okay let's say we want to take it out. Can you just grab the book you want and leave? No Sir! Let's say we want to take the Math book out of the stack. BUT ITS ON THE BOTTOM! You cannot just pull it out right? What do you do? Take each book on top off one by one. That's called *pop*. Popping works in two ways. 

- General case
- Index specific

```
myStack.pop()
```
This removes the very first element which is our English book. Remember, the stack is a LIFO data structure. Last in First out, English book was last added so its the first to be removed. The *pop()* function removes the first element if an index is not specified. Which brings us to the index specific.

```
myStack.pop(2)
```
Will remove the third element (remember indexing starts with 0) Science. 

![](./img/dataStructures/stack.png "Stack")


Now its time to just dive into code and other functions that the stack offers that operate on it.

- Peek (Return the element on top of stack)
- isEmpty (Return whether the stack is empty or not)
- Pop (Removes an element)
- Push (Adds an element)
- Size (Returns the current size of stack)

Below is the implementation of the Stack class in Python:

```Python
class Stack:
     def __init__(self):
         self.items = []

     def isEmpty(self):
         return self.items == []

     def push(self, item):
         self.items.append(item)

     def pop(self):
         return self.items.pop()

     def peek(self):
         return self.items[len(self.items)-1]

     def size(self):
         return len(self.items)
```

## Practice
-----------
- Practice implementing it
- Play around with the functions
- Try creating your own function to operate on the stack
